# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
sound1 = simplegui.load_sound("http://rpg.hamsterrepublic.com/wiki-images/8/8e/Confirm8-Bit.ogg")
sound2 = simplegui.load_sound("http://rpg.hamsterrepublic.com/wiki-images/2/21/Collision8-Bit.ogg")
COLORS=['Red','Blue','Yellow','Green','Cyan','Purple','Orange','White']
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel, ball_color # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel = [0,0]
    ball_color = COLORS[random.randrange(0,len(COLORS))]
#   print "D: ", direction
    if direction:
        ball_vel[0] = random.randrange(120, 240) / 60
        ball_vel[1] = - random.randrange(60, 180) / 60
    else:
        ball_vel[0] = - random.randrange(120, 240) / 60
        ball_vel[1] = - random.randrange(60, 180) / 60

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    paddle1_pos = [PAD_WIDTH - HALF_PAD_WIDTH, HEIGHT / 2]
    paddle2_pos = [WIDTH - HALF_PAD_WIDTH, HEIGHT / 2]
    paddle1_vel = 0
    paddle2_vel = 0
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    if ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] <= 0 + BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[0] >= (WIDTH - PAD_WIDTH) - BALL_RADIUS:
        if ball_pos[1] >= paddle2_pos[1]-HALF_PAD_HEIGHT and ball_pos[1] <= paddle2_pos[1]+HALF_PAD_HEIGHT:
            ball_vel[0] = - ball_vel[0] * 1.1
            sound1.play()
        else:
            score1 += 1
            sound2.play()
            spawn_ball(LEFT)
    elif ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        if ball_pos[1] >= paddle1_pos[1]-HALF_PAD_HEIGHT and ball_pos[1] <= paddle1_pos[1]+HALF_PAD_HEIGHT:
            ball_vel[0] = - ball_vel[0] * 1.1
            sound1.play()
        else:
            score2 += 1
            sound2.play()
            spawn_ball(RIGHT)
            
    if paddle1_pos[1] - HALF_PAD_HEIGHT + paddle1_vel < 0:
        paddle1_pos[1] = 0 + HALF_PAD_HEIGHT
    elif paddle1_pos[1] + HALF_PAD_HEIGHT + paddle1_vel > HEIGHT:
        paddle1_pos[1] = HEIGHT - HALF_PAD_HEIGHT
    else:
        paddle1_pos[1] += paddle1_vel

    if paddle2_pos[1] - HALF_PAD_HEIGHT + paddle2_vel < 0:
        paddle2_pos[1] = 0 + HALF_PAD_HEIGHT
    elif paddle2_pos[1] + HALF_PAD_HEIGHT + paddle2_vel > HEIGHT:
        paddle2_pos[1] = HEIGHT - HALF_PAD_HEIGHT
    else:
        paddle2_pos[1] += paddle2_vel
                
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, ball_color, ball_color)
    
    # draw paddles
    canvas.draw_line([paddle1_pos[0], paddle1_pos[1]-HALF_PAD_HEIGHT], [paddle1_pos[0], paddle1_pos[1]+HALF_PAD_HEIGHT], PAD_WIDTH, 'White')
    canvas.draw_line([paddle2_pos[0], paddle2_pos[1]-HALF_PAD_HEIGHT], [paddle2_pos[0], paddle2_pos[1]+HALF_PAD_HEIGHT], PAD_WIDTH, 'White')
    
    # draw scores
    canvas.draw_text(str(score1), (WIDTH / 4,50), 42, "Cyan")
    canvas.draw_text(str(score2), (WIDTH / 4 * 3,50), 42, "Cyan")
 
def keydown(key):
    global paddle1_vel, paddle2_vel
    vel = 5
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = vel
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -vel
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = vel       

def keyup(key):
    global paddle1_vel, paddle2_vel
    vel = 0
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = vel
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = vel
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = vel
    
def reset_button_handler():
    global score1, score2
    score1 = 0
    score2 = 0
    new_game()

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Reset", reset_button_handler, 100)

# start frame
new_game()
frame.start()
