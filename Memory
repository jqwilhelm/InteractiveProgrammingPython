# implementation of card game - Memory

import simplegui
import random

turns = 0

# helper function to initialize globals
def new_game():
    global deck_of_cards, exposed, state, turns, cards_selected
    cards_selected = []
    turns = 0
    state = 0
    exposed = [False] * 16
    deck_of_cards = range(0,8) * 2
    random.shuffle(deck_of_cards) 

# define event handlers
def mouseclick(pos):
    # add game state logic here
    global state, turns, cards_selected
    card_number = pos[0] / 50
    if state == 0:
        if exposed[card_number] == False:
            cards_selected.append(card_number)
            exposed[card_number] = True
            state = 1
    elif state == 1:
        if exposed[card_number] == False:
            cards_selected.append(card_number)
            exposed[card_number] = True
            turns += 1
            state = 2
    else:
        if exposed[card_number] == False:
            if deck_of_cards[cards_selected[0]] != deck_of_cards[cards_selected[1]]:
                exposed[cards_selected[0]] = False
                exposed[cards_selected[1]] = False
            cards_selected = [card_number]
            exposed[card_number] = True
            state = 1
                    
# cards are logically 50x100 pixels in size    
def draw(canvas):
    label.set_text("Turns = " + str(turns))
    for card in range(16):
        canvas.draw_text(str(deck_of_cards[card]), (15+(card*50), 65), 48, "Cyan")
        if exposed[card] == False:
            canvas.draw_line([card*50+25, 0],[card*50+25, 100], 46, "Green")

# create frame and add a button and labels
frame = simplegui.create_frame("Memory", 800, 100)
frame.add_button("Reset", new_game)
label = frame.add_label("Turns = " + str(turns))

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()

# Always remember to review the grading rubric
