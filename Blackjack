# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
bet = 1

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.cards = []

    def __str__(self):
        # return a string representation of a hand
        cards_in_hand = ""
        for c in self.cards:
            cards_in_hand += "%s " % str(c)
        return "Hand contains %s" % cards_in_hand

    def add_card(self, card):
        # add a card object to a hand
        self.cards.append(card)

    def get_value(self):
        # compute the value of the hand, see Blackjack video
        hand_value = 0
        aces = False
        for c in self.cards:
            if c.get_rank() == "A":
                aces = True
            hand_value += VALUES[c.get_rank()]
            
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust   
        if aces:
            if hand_value + 10 <= 21:
                return hand_value + 10
        return hand_value
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        xpos = pos[0]
        for c in self.cards:
            c.draw(canvas, (xpos, pos[1]))
            xpos += CARD_SIZE[0]
        
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(suit, rank))

    def shuffle(self):
        # shuffle the deck         
        random.shuffle(self.deck)

    def deal_card(self):
        # deal a card object from the deck
        card_to_deal = random.choice(self.deck)
        self.deck.remove(card_to_deal)
        return card_to_deal
    
    def __str__(self):
        # return a string representing the deck
        cards_in_deck = ""
        for c in self.deck:
            cards_in_deck += "%s " % str(c)
        return "Deck contains %s" % cards_in_deck

#define event handlers for buttons
def deal():
    global outcome, in_play, my_hand, dealer_hand, deck_cards, score

    if in_play:
        outcome = "Forfeit - Dealer WINS"
        score -= bet
        in_play = False
    else:
        in_play = True
    
        deck_cards = Deck()
        deck_cards.shuffle()
    
        my_hand = Hand()
        my_hand.add_card(deck_cards.deal_card())
        my_hand.add_card(deck_cards.deal_card())
    
        dealer_hand = Hand()
        dealer_hand.add_card(deck_cards.deal_card())
        dealer_hand.add_card(deck_cards.deal_card())
    
#        if dealer_hand.get_value() == 21:
#            stand()
       
def hit(): 
    global in_play, outcome, score
    # if the hand is in play, hit the player
    if in_play:
        my_hand.add_card(deck_cards.deal_card())
   
    # if busted, assign a message to outcome, update in_play and score
        if my_hand.get_value() > 21:
          outcome = "You have busted"
          score -= bet
          in_play = False
       
def stand():
    global in_play, outcome, score
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    while in_play:
        if dealer_hand.get_value() > 21:
            in_play = False
            outcome = "Dealer has busted"
            score += bet
        elif dealer_hand.get_value() >= my_hand.get_value():
            in_play = False
            outcome = "Dealer WINS"
            score -= bet
        elif dealer_hand.get_value() >= 17:
            in_play = False
            outcome = "You WIN"
            score += bet
        else:
          dealer_hand.add_card(deck_cards.deal_card())

# draw handler    
def draw(canvas):
    canvas.draw_text("BlackJack", (200,50), 48, "Red", "sans-serif")
    canvas.draw_line((0,75), (600, 75) , 2, "Black")
    
    dealer_hand.draw(canvas, [75, 125])        
    my_hand.draw(canvas, [75, 375])

    # UNCOMMENT to see your hand value    
    # canvas.draw_text(str(my_hand.get_value()), (10,470), 12, "White", "sans-serif")
    
    canvas.draw_line((0,525), (600, 525) , 2, "Black")
    canvas.draw_text("Score: %2d" % score, (400,575), 36, "Black", "sans-serif")
    
    if in_play:
        # COMMENT out code to display all cards in dealer hand
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (75 + CARD_BACK_CENTER[0] , 125 + CARD_BACK_CENTER[1]), CARD_BACK_SIZE)       
        
        canvas.draw_text("Hit or Stand?", (75,575), 24, "Black", "sans-serif")
    else:
        # UNCOMMENT to see dealer hand value after each round
        # canvas.draw_text(str(dealer_hand.get_value()), (10,220), 12, "White", "sans-serif")
        
        canvas.draw_text(outcome, (75,310), 36, "Yellow", "sans-serif")
        canvas.draw_text("New deal?", (75,575), 24, "Black", "sans-serif")

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
deal()
frame.start()

# remember to review the gradic rubric
